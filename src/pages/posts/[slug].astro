---
import { getCollection } from 'astro:content';
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';
import { SEO } from 'astro-seo';
import IconMetadata from '~/components/IconMetadata.astro';
import Tag from '~/components/Tag.astro';
import Footer from '~/features/footer/Footer.astro';
import Navigation from '~/features/navigation/Navigation.astro';
import Title from '~/features/title/Title.astro';
import Layout from '~/layouts/post/Layout.astro';
import { toStr } from '~/utils/date';
import { filterPublished } from '~/utils/posts';

export const getStaticPaths = (async () => {
    const posts = filterPublished(await getCollection('posts'));

    return posts.map((post) => ({
        params: { slug: post.slug },
        props: { post },
    }));
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post } = Astro.props;
const { title, published, updated, tags } = post.data;
const { Content } = await post.render();
---

<SEO
    slot="head"
    openGraph={{
        basic: {
            title,
            type: 'article',
            image: new URL(`/og/${post.slug}.png`, Astro.site).toString(),
        },
        image: {
            alt: title,
        }
    }}
/>
<Layout {...{ title }}>
    <Navigation slot="nav" />
    <Title slot="title">
        {title}
    </Title>
    <div slot="meta" class="my-4 flex flex-wrap gap-3 items-center">
        <div class="metadata">
            {toStr(published)}
        </div>
        {
            updated && (
                <IconMetadata name="line-md:rotate-270">
                    {toStr(updated)}
                </IconMetadata>
            )
        }
        {tags.map((tag) => <Tag name={tag} />)}
    </div>
    <Content slot="content" />
    <Footer slot="footer" />
</Layout>
