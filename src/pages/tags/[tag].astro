---
import { getCollection } from 'astro:content';
import type {
    GetStaticPaths,
    InferGetStaticParamsType,
    InferGetStaticPropsType,
} from 'astro';
import Footer from '~/features/footer/Footer.astro';
import List from '~/features/list/List.astro';
import Navigation from '~/features/navigation/Navigation.astro';
import TagList from '~/features/tag-list/TagList.astro';
import Title from '~/features/title/Title.astro';
import Layout from '~/layouts/list/Layout.astro';
import { filterPublished, uniqueTags } from '~/utils/from-posts';

export const getStaticPaths = (async () => {
    const posts = filterPublished(await getCollection('posts'));

    return uniqueTags(posts).map((tag) => ({
        params: { tag },
        props: {
            posts,
            taggedPosts: posts.filter(({ data }) => data.tags.includes(tag)),
        },
    }));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { tag } = Astro.params as Params;
// NOTE: use assert to suppress errors from `astro check`
const { posts, taggedPosts } = Astro.props as Props;
---

<Layout title={`#${tag}`}>
    <Navigation slot="nav" />
    <TagList slot="tags" {...{ posts }} />
    <Title slot="title">
        #{tag}
    </Title>
    <List slot="list" posts={taggedPosts} />
    <Footer slot="footer" />
</Layout>
