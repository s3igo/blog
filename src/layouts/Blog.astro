---
import '@fontsource/biz-udgothic/japanese-400.css';
import '@fontsource/jetbrains-mono/latin-400.css';
import '@fontsource/nunito-sans/latin-400-italic.css';
import '@fontsource/nunito-sans/latin-700.css';
import '@fontsource/zen-kaku-gothic-new/japanese-700.css';
import Toc from '~/components/atoms/Toc.astro';
import { Tag } from '~/components/molecules/Tag';
import { pageTitle } from '~/utils/constructString';
import Layout from './Layout.astro';
import type { MarkdownHeading } from 'astro';
import type { Dates } from '~/domain/model/post/dates';
import type { FirstThreeSentences, Title } from '~/domain/model/post/body';
import type { Tags } from '~/domain/model/post/tags';

type Props = {
    title: Title;
    firstThreeSentences: FirstThreeSentences;
    dates: Dates;
    tags: Tags;
    headings: MarkdownHeading[];
};

const { dates, firstThreeSentences, headings, tags, title } = Astro.props;
---

<Layout title={pageTitle(title)} description={firstThreeSentences}>
    <div class="flex flex-col gap-5 md:flex-row-reverse">
        <div class="pt-12 md:w-52">
            <div class="sticky top-12 flex shrink-0 flex-col gap-4">
                <div class="flex flex-col">
                    <!-- FIXME: 以下のtruncateがないと幅が崩れる -->
                    <span class="metadata truncate">created on {dates.published}</span>
                    {dates.updated && <span class="metadata">last updated on {dates.updated}</span>}
                    {tags.value.map((tag) => <Tag name={tag} />)}
                </div>
                <div>
                    <h2 class="decoration text-xl text-primary">目次</h2>
                    <Toc headings={headings.filter(({ depth }) => depth !== 1)} />
                </div>
            </div>
        </div>
        <div class="blog">
            <slot />
        </div>
    </div>
</Layout>
<style is:global>
    .blog {
        @apply sm:text-lg;

        p {
            @apply py-4;
        }

        a {
            /* TODO: なぜか`.link`ユーティリティクラスが読めない */
            /* @apply link; */
            @apply text-secondary decoration-2 underline-offset-2 hover:underline;
        }

        em {
            @apply px-1;
        }

        blockquote {
            @apply border-l-4 border-tertiary pl-6;
        }

        /* --------------------------------- header --------------------------------- */
        h1 {
            @apply my-2 text-2xl leading-relaxed text-tertiary xs:text-3xl sm:text-4xl;
        }

        :is(h2, h3, h4, h5) {
            @apply border-b border-dashed border-primary pb-3 pt-12 after:text-foreground/50 sm:pt-[72px];
        }

        h2 {
            @apply text-2xl hover:after:content-["_##"] sm:text-3xl;
        }

        h3 {
            @apply text-xl hover:after:content-["_###"] sm:text-2xl;
        }

        h4 {
            @apply text-lg hover:after:content-["_####"] sm:text-xl;
        }

        h5 {
            @apply hover:after:content-["_#####"];
        }

        /* header要素が連続する場合の余白調整 */
        :is(h2 + h3, h3 + h4, h4 + h5) {
            @apply pt-3;
        }

        /* ---------------------------------- list ---------------------------------- */
        :is(ul, ol) {
            @apply list-inside py-4;
        }

        ul {
            @apply list-disc;
        }

        ol {
            @apply list-decimal;
        }

        /* list要素内でのインデント */
        :is(ul ul, ol ol) {
            @apply ml-7 py-0;
        }

        /* ---------------------------------- code ---------------------------------- */
        code {
            @apply font-code;

            /* inline */
            &:not(pre > *) {
                @apply mx-1 rounded-md bg-shadow/40 px-1 text-base text-foreground/60;
            }
        }

        /* block */
        pre {
            @apply my-4 rounded-xl border border-dashed border-tertiary p-4 text-base;
        }

        /* filename */
        .remark-code-title {
            @apply mb-[-16px] pl-2 font-code text-base text-tertiary;
        }
    }
</style>
